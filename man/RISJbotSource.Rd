% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RISJbotSource.R
\name{RISJbotSource}
\alias{RISJbotSource}
\title{A Source to handle JSONLines output from RISJbot}
\usage{
RISJbotSource(x, mappings = NULL)
}
\arguments{
\item{x}{A filename string or connection}

\item{mappings}{An optional named list mapping input JSONLines field names to
metadata fields in the output documents. If mappings are provided, it must
include a mapping for \code{content}, to indicate which part of the input
JSONLines file should be used for the main text of the output document.

If mappings are not provided, \code{content} is collected from the \code{bodytext}
field, all other input fields are carried over to the output document
with their original names, and the \code{datetimestamp} output field is taken as
the first available of the following: \code{datetimestamp} input field,
\code{modtime} input field, \code{firstpubtime} input field, \code{fetchtime} input field,
or (if all else fails) the current date and time, with a warning.}
}
\value{
An object of class \code{RISJbotSource}, inheriting from
\link[tm:SimpleSource]{tm::SimpleSource}.
}
\description{
Constructs a Source to handle JSONLines output from RISJbot. For
better integration with corpora built using other sources, it allows
arbitrary mappings between field names in the RISJbot JSONLines file and
metadata field names in the eventual \link[tm:PlainTextDocument]{tm::PlainTextDocument}.
}
\details{
The returned documents have IDs constructed to be unique under all
normal circumstances. This is based on the input file's \code{source} field (if
available), the document date (drawn from the input file's \code{modtime},
failing that \code{firstpubtime}, failing that \code{fetchtime}, failing that the
current date with a warning), the document's sequence number in the input
file, and an 8 character MD5 digest of the document's metadata list.
}
\examples{
\dontrun{

mappings <- list(content="bodytext", dt="firstpubtime", heading="headline")
s <- RISJbotSource('input.jl', mappings=mappings)
corp <- VCorpus(s)
}
}
